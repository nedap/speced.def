# Clojure CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-clojure/ for more details
#
version: 2
jobs:
  build:
    docker:
    # specify the version you desire here
    - image: circleci/clojure:lein-2.8.1-node

    # Specify service dependencies here if necessary
    # CircleCI maintains a library of pre-built images
    # documented at https://circleci.com/docs/2.0/circleci-images/
    # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      LEIN_ROOT: "true"
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m

    steps:
    - checkout

    # Download and cache dependencies
    - restore_cache:
        keys:
        - v1-dependencies-{{ checksum "project.clj" }}
        # fallback to using the latest cache if no exact match is found
        - v1-dependencies-

    - run: lein with-profile -dev,+ci deps

    - save_cache:
        paths:
        - ~/.m2
        key: v1-dependencies-{{ checksum "project.clj" }}

    - run:
        name: 'Run JVM test suite'
        command: lein test

    - run:
        name: 'Compile ClojureScript test suite'
        command: lein do clean, cljsbuild once test

    - run:
        name: 'Run node.js tests'
        command: node target/out/tests.js

  jfrog:
    docker:
      - image: circleci/clojure:lein-2.8.1-node

    working_directory: ~/repo

    steps:
      - run:
          name: import GPG key
          command: echo -e "$GPG_KEY_V2" | gpg --import
          
      - checkout

      - run:
          name: Perform pre-release sanity check
          command: lein with-profile -dev,+ci run -m nedap.ci.release-workflow.api sanity-check
          
      - run:
          name: release to JFrog
          command: lein deploy

      - run:
          name: release to Clojars
          command: lein deploy clojars

workflows:
  version: 2
  CircleCI:
    jobs:
      - build:
          context: JFrog
          filters:
            branches:
              only: /.*/
            tags:
              only: /^v\d+\.\d+\.\d+(-alpha\d+)?$/              
      - jfrog:
          context: JFrog
          requires: 
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d+\.\d+\.\d+(-alpha\d+)?$/
